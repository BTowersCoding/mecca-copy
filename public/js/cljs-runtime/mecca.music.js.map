{"version":3,"sources":["mecca/music.cljs"],"mappings":"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","names":["mecca.music/mario-jump","beat","G__49555","re-frame.core/subscribe","notes","G__49556","jump","G__49557","and__4174__auto__","cljs.core/deref","G__49560","cljs.core/count","p1__49554#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__49561","re-frame.core/dispatch","mecca.music/mario-move","G__49563","playing?","G__49564","now","G__49565","length","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","p1__49562#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","started","G__49566","elapsed","beat-length","G__49567","end-time","current-beat","last-drawn-pos","G__49568","G__49569","G__49570","G__49571","mecca.music/dispatch-timer-event","G__49572","js/mecca","js/mecca.music","js/mecca.music.do-timer","mecca.music/do-timer","js/setInterval","mecca.music/load-sound","named-url","out","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","req","js/XMLHttpRequest","e","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","mecca.music/decode","G__49573","decoded-buffer","js/console","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","mecca.music/buffer-source","buffer","source","G__49574","mecca.music/get-and-decode","c__30223__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__30224__auto__","switch__29913__auto__","state_49586","state_val_49587","inst_49575","cljs.core.async.impl.ioc-helpers/take!","inst_49577","statearr-49588","statearr-49589","statearr-49590","inst_49579","statearr-49591","inst_49584","cljs.core.async.impl.ioc-helpers/return-chan","inst_49581","statearr-49592","statearr-49593","state-machine__29914__auto__","ret-value__29915__auto__","result__29916__auto__","cljs.core/keyword-identical?","e49594","js/Object","ex__29917__auto__","statearr-49595","cljs.core.async.impl.ioc-helpers/process-exception","state__30225__auto__","statearr-49596","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","mecca.music/zero-pad","n","mecca.music/measures","p1__49597#","cljs.core.range.cljs$core$IFn$_invoke$arity$2","mecca.music/sax","p1__49598#","mecca.music/load-samples","state_49629","state_val_49630","inst_49599","cljs.core/PersistentHashMap","inst_49600","inst_49601","inst_49602","inst_49603","inst_49604","statearr-49631","statearr-49632","inst_49606","inst_49607","inst_49608","cljs.core/not","statearr-49633","statearr-49634","inst_49627","inst_49610","inst_49611","inst_49612","inst_49613","inst_49614","inst_49615","statearr-49635","statearr-49636","inst_49625","statearr-49637","inst_49617","inst_49618","inst_49619","inst_49620","inst_49621","statearr-49638","statearr-49639","statearr-49640","e49641","statearr-49642","statearr-49643","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/rest","js/mecca.music.loading-samples","mecca.music/loading-samples","state_49653","state_val_49654","inst_49644","cljs.core/PersistentVector","inst_49645","statearr-49655","inst_49647","inst_49648","inst_49649","inst_49650","inst_49651","statearr-49656","statearr-49657","e49658","statearr-49659","statearr-49660","mecca.music/add-semitone","rate","js/Math","mecca.music/sub-semitone","mecca.music/inc-rate","semis","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","mecca.music/dec-rate","mecca.music/pitch->rate","midi-num","mecca.music/play-note","pitch","context","G__49661","samples","G__49662","instrument","G__49663","audio-buffer","cljs.core.get.cljs$core$IFn$_invoke$arity$2","sample-source","mecca.music/play-sample","G__49664","G__49665","compressor","analyser","mecca.music/play-at","time","G__49666","G__49667","mecca.music/delay-note","beats","note","p1__49668#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","mecca.music/advance-note","p1__49669#","mecca.music/queue-section","from","to","G__49672","G__49673","tempo","G__49674","section","p1__49670#","advanced","p1__49671#","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__49676","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__49678","cljs.core/chunk-buffer","i__49677","map__49679","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49675","cljs.core/chunk-rest","map__49681","cljs.core/cons","mecca.music/play-section","G__49685","G__49686","G__49687","p1__49683#","p1__49684#","s__49689","b__49691","i__49690","map__49692","iter__49688","map__49694","mecca.music/play-notes","editor-start","G__49696","G__49697","G__49698","play-pos","G__49699","mecca.music/play-from-here","G__49701","G__49702","p1__49700#","mecca.music/play-song!","G__49703","G__49704","G__49705","G__49706","s__49708","b__49710","i__49709","map__49711","iter__49707","map__49713","mecca.music/get-bytes!","freq-data","cljs.core/chunk-first"],"sourcesContent":["(ns mecca.music\r\n  (:require\r\n   [cljs.core.async :refer [<! chan put! close!]]\r\n   [re-frame.core :as rf :refer [subscribe dispatch]])\r\n  (:require-macros\r\n   [cljs.core.async.macros :refer [go go-loop]]))\r\n\r\n(defn mario-jump []\r\n  (let [beat (subscribe [:current-position])\r\n        notes (subscribe [:notes])\r\n        jump (subscribe [:mario-jump])]\r\n    (when (and @(subscribe [:playing?])\r\n               (zero? @jump))\r\n      (if (< 0 (count (filter #(= (:time %) (inc @beat))\r\n                              @notes)))\r\n        (dispatch [:jump!])))))\r\n\r\n(defn mario-move []\r\n  (let [notes (subscribe [:notes])\r\n        playing? @(subscribe [:playing?])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        length (apply max (map #(:time %) @notes))\r\n        started (subscribe [:play-start])\r\n        elapsed (- now @started)\r\n        beat-length (/ 60 @(subscribe [:tempo]))\r\n        end-time (+ @started (* beat-length 4))\r\n        current-beat (/ elapsed beat-length)\r\n        last-drawn-pos (subscribe [:current-position])]\r\n    (when playing?\r\n      (if (< length current-beat)\r\n        (dispatch [:play-off])\r\n        (if (< @last-drawn-pos current-beat)\r\n          (do (dispatch [:move-mario])\r\n              (dispatch [:advance-position])))))\r\n    (mario-jump)))\r\n\r\n(defn dispatch-timer-event []\r\n  (dispatch [:tick!])\r\n  (mario-move))\r\n\r\n(defonce do-timer\r\n  (js/setInterval dispatch-timer-event 60))\r\n\r\n(defn load-sound [named-url]\r\n  (let [out (chan)\r\n        req (js/XMLHttpRequest.)]\r\n    (set! (.-responseType req) \"arraybuffer\")\r\n    (set! (.-onload req) (fn [e]\r\n                           (if (= (.-status req) 200)\r\n                             (do (put! out (assoc named-url :buffer (.-response req)))\r\n                                 (close! out))\r\n                             (close! out))))\r\n    (.open req \"GET\" (:url named-url) true)\r\n    (.send req)\r\n    out))\r\n\r\n(defn decode [named-url]\r\n  (let [out (chan)]\r\n    (if (:buffer named-url)\r\n      (do\r\n        (.decodeAudioData\r\n         @(subscribe [:audio-context]) (:buffer named-url)\r\n         (fn [decoded-buffer]\r\n           (put! out (assoc named-url :decoded-buffer decoded-buffer))\r\n           (close! out))\r\n         (fn []\r\n           (.error js/console \"Error loading file \" (prn named-url))\r\n           (close! out))))\r\n      (close! out))\r\n    out))\r\n\r\n(defn buffer-source [buffer]\r\n  (let [source (.createBufferSource @(subscribe [:audio-context]))]\r\n    (set! (.-buffer source) buffer)\r\n    source))\r\n\r\n(defn get-and-decode [named-url]\r\n  (go\r\n    (when-let [s (<! (load-sound named-url))]\r\n      (<! (decode s)))))\r\n\r\n(defn zero-pad [n]\r\n  (if (< n 10) (str \"0\" n) n))\r\n\r\n(def measures (map #(str \"tub-\" (zero-pad %))\r\n                   (range 1 21)))\r\n\r\n(def sax (map #(str \"sax-\" (zero-pad %))\r\n              (range 1 14)))\r\n\r\n(defn load-samples []\r\n  (go-loop [result {}\r\n            sounds (into sax (into measures (range 1 19)))]\r\n    (if-not (nil? (first sounds))\r\n      (let [sound (first sounds)\r\n            decoded-buffer (<! (get-and-decode {:url (str \"/audio/\" sound \".wav\")\r\n                                                :sound sound}))]\r\n        (prn sound)\r\n        (prn decoded-buffer)\r\n        (recur (assoc result sound decoded-buffer)\r\n               (rest sounds)))\r\n      result)))\r\n\r\n(defonce loading-samples\r\n  (go\r\n    (dispatch [:load-samples  (<! (load-samples))])\r\n    (prn \"Samples loaded\")))\r\n\r\n(defn add-semitone [rate]\r\n  (* rate (.pow js/Math 2 (/ 1 12))))\r\n\r\n(defn sub-semitone [rate]\r\n  (* rate (.pow js/Math 2 (/ -1 12))))\r\n\r\n(defn inc-rate [semis]\r\n  (reduce add-semitone (repeat semis 1)))\r\n\r\n(defn dec-rate [semis]\r\n  (reduce sub-semitone (repeat semis 1)))\r\n\r\n(defn pitch->rate [midi-num]\r\n  (if (< 66 midi-num)\r\n    (inc-rate (- midi-num 66))\r\n    (dec-rate (- 68 midi-num))))\r\n\r\n(defn play-note [pitch]\r\n  (let [context       @(subscribe [:audio-context])\r\n        samples       (subscribe [:samples])\r\n        instrument    (subscribe [:instrument])\r\n        audio-buffer  (:decoded-buffer (get @samples @instrument))\r\n        sample-source (.createBufferSource context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-playbackRate sample-source)\r\n     (pitch->rate pitch)\r\n     (.-currentTime context))\r\n    (.connect sample-source (.-destination context))\r\n    (.start sample-source)\r\n    sample-source))\r\n\r\n(defn play-sample [instrument pitch]\r\n  (let [context (subscribe [:audio-context])\r\n        samples (subscribe [:samples])\r\n        audio-buffer (:decoded-buffer (get @samples instrument))\r\n        sample-source (.createBufferSource @context)\r\n        compressor (.createDynamicsCompressor @context)\r\n        analyser (.createAnalyser @context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-playbackRate sample-source)\r\n     (pitch->rate pitch)\r\n     (.-currentTime @context))\r\n    (.connect sample-source analyser)\r\n    (.connect sample-source (.-destination @context))\r\n    (.start sample-source)\r\n    sample-source))\r\n\r\n(defn play-at [instrument pitch time]\r\n  (let [context (subscribe [:audio-context])\r\n        samples (subscribe [:samples])\r\n        audio-buffer (:decoded-buffer (get @samples instrument))\r\n        sample-source (.createBufferSource @context)]\r\n    (set! (.-buffer sample-source) audio-buffer)\r\n    (.setValueAtTime\r\n     (.-playbackRate sample-source)\r\n     (pitch->rate pitch)\r\n     time)\r\n    (.connect sample-source (.-destination @context))\r\n    (.start sample-source time)\r\n    sample-source))\r\n\r\n(defn delay-note [beats note]\r\n  (update note :time #(+ beats %)))\r\n\r\n(defn advance-note [beats note]\r\n  (update note :time #(- % beats)))\r\n\r\n(defn queue-section [from to]\r\n  (let [notes (subscribe [:notes])\r\n        started (subscribe [:play-start])\r\n        tempo (subscribe [:tempo])\r\n        section (filter #(<= from (:time %) to) @notes)\r\n        advanced (map #(advance-note from %) section)]\r\n    (doall (for [{:keys [time instrument pitch]} section]\r\n             (play-at instrument pitch (+ @started (* (/ 60 @tempo) time)))))))\r\n\r\n(defn play-section [from to]\r\n  (let [notes (subscribe [:notes])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        tempo (subscribe [:tempo])\r\n        section (filter #(<= from (:time %) to) @notes)\r\n        advanced (map #(advance-note from %) section)]\r\n    (doall (for [{:keys [time instrument pitch]} advanced]\r\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\r\n\r\n(defn play-notes [n]\r\n  (let [editor-start (subscribe [:editor-beat-start])\r\n        tempo (subscribe [:tempo])\r\n        beat-length (/ 60 @(subscribe [:tempo]))\r\n        play-pos (if (< @editor-start 4)\r\n                   @editor-start\r\n                   (+ 4 @(subscribe [:editor-beat-start])))]\r\n    (play-section (dec play-pos) (+ (dec play-pos) (* n 0.5)))))\r\n\r\n(defn play-from-here []\r\n  (let [notes (subscribe [:notes])\r\n        editor-start (subscribe [:editor-beat-start])\r\n        play-pos ;(if (< @editor-start 4)\r\n        @editor-start\r\n                  ; (+ 4 @(subscribe [:editor-beat-start])))\r\n        length (apply max (map #(:time %) @notes))]\r\n    (play-section (dec play-pos) (+ 16 play-pos))))\r\n\r\n(defn play-song! []\r\n  (let [notes (subscribe [:notes])\r\n        now (.-currentTime @(subscribe [:audio-context]))\r\n        tempo (subscribe [:tempo])]\r\n    (dispatch [:reset-position])\r\n    (doall (for [{:keys [time instrument pitch]} @notes]\r\n             (play-at instrument pitch (+ now (* (/ 60 @tempo) time)))))))\r\n\r\n(defn get-bytes! [analyser freq-data]\r\n  (.getByteFrequencyData analyser freq-data)\r\n  freq-data)\r\n"]}